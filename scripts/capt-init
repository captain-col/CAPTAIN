#! /bin/bash
#
# Initialize an existing package or project directory to work with an
# empty, bare central repository.

export PROGRAM
PROGRAM=`basename $0`

usage () {
    cat <<EOF | more
Usage: 
   ${PROGRAM}            # No arguments allowed.

Initialize a new package or project.  This isn't run very often, but
automates the "annoying" parts of adding packages or projects.  It's
used in place of "git init", which means it's run once the first time
a package or project is created.  As with "git init", this only
creates the local repository, and the central (bare) repository still
needs to be created (see below).  Unlike "git init", this must be run
from inside the new package (or project) cmt directory. 

CREATE A NEW PACKAGE
  [ 0) Move to where you want the package to be created. ]
  1) cmt create <package-name> master
  2) Run ${PROGRAM} in the new package's cmt directory
       -- This will run git-init, install and add .gitignore file, and
          configure the repository origin.
  4) Do your initial work on the new package and add it to (the local) git.
  5) Push your new package to the central repository (git push --all)

CREATE A NEW PROJECT
  This is the same as creating a new package, but you use 
      cmt create_project <project-name> master 
  instead of the plain "cmt create" command.

CREATE A NEW REPOSITORY
  1) Clone gitolite-admin repository (capt-clone gitolite-admin)
  2) Edit the gitolite-admin/conf/gitolite.conf file.  The needed
     steps are documented in that file.  The name you use here is the
     name of the new package (or project).  For instance to add a new
     package called captainRelease you would add the lines:
                  repo captainRelease
                       RW+   = @all
  3) Add and commit your changes to your local repo (git commit -a)
  4) Push your changes (git push)
        note: This can be done after the new package or project has
              already been initialized using ${PROGRAM}.  However, you
              can't push until the new repository has been created.

Run with the --apply option to actually initialize the repository.
    i.e. capt-init --apply
EOF
}

if [ "x${1}" != "x--apply" ]; then
    usage
    exit 1
fi

# Find the current package or project name.
if [ -f project.cmt ]; then
   NAME=`grep '^project' project.cmt | sed 's/project \(.*\)/\\1/'`
   echo Connect project named $NAME to central repository
elif [ -f requirements ]; then
   NAME=`grep '^package' requirements | sed 's/package \(.*\)/\\1/'`
   echo Connect package named $NAME to central repository
fi

if [ "x${NAME}" = "x" ]; then
    echo Cannot find the project or package name. Are you in the cmt directory?
    echo "    " Run with --help for usage information.
    exit 1
fi

# Initialize the git repository (if needed)
if [ ! -d ../.git ]; then
    echo Initializing the local git repository
    (cd ..; git init)
else
    echo Local repository is already initialized.  Not running git init.
fi

# Make sure we have a reasonable default for the gitignore file.
if [ ! -f ../.gitignore ]; then
    echo Installing a .gitignore file
    cp ${CAPT_ROOT}/CAPTAIN/inputs/dot.gitignore ../.gitignore
    git add ../.gitignore
else
    echo Local .gitignore already exists.  Not installing a new one.
fi

# Define a uniform call to git config.  This makes the code easier to read.
config () {
    if [ x`git config "$1"` = x ]; then
	git config "$1" "$2"
	echo Set "$1" to `git config "$1"`
    else
	echo
	echo "###" "$1" is `git config "$1"`
	echo "The value was not changed.  You can reset this by hand with:"
	echo "  git config $1 $2"
    fi
}

# Set the config options.
config remote.origin.fetch     '+refs/heads/*:refs/remotes/origin/*'
config remote.origin.url       ${CAPT_GIT}${NAME}
config branch.master.remote    origin
config branch.master.merge     refs/heads/master

# Add the files that *MUST* be there
if [ -f project.cmt ]; then git add project.cmt; fi
if [ -f requirements ]; then git add requirements; fi 
if [ -f version.cmt ]; then git add version.cmt; fi

echo
echo "After adding and committing files to the local repository, use "
echo '   "git push --all" to push the new files.'

#-*-Shell-Script-*-
