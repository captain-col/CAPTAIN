#! /bin/dash
#
# Import a tar file for a package being tracked in a git repository.
#

usage () {
    cat <<EOF

Old style tar options should be specified after the other options.
Note that because of the conflict between the optoins for this
script and the tar options, "OLD STYLE" tar options must be used.

Usage:
  capt-import-tar-file --tag=<version> xvzf upstream.tar.gz
  capt-import-tar-file --tag=<version> xvjf upstream.tar.bz2

Options:

   -h, --help : Print this documentation.
   -t <tag-name>, --tag=<tag-name> : Set the version tag for the upstream 
              source code.  This will be added as a git tag to the imported 
              source so that it can be easily referenced.  For example,
              "get checkout <tag-name>".  See the git documentation to find 
              out everything that can be done with a tag.
   --strip-component2=<n> : Strip this many levels from the files (see 
              tar --strip-components for documentation).
   --dry-run : Don't run the commands

EOF
}

# Handle the input parameters.  This is mostly copied from the getopt
# documentation.  It relies on gnu getopt.

TEMP=$(getopt -o hs:t: \
    --long dry-run,help,strip-components:,tag: \
    -- "$@")

if [ $? != 0 ]; then
    echo
    echo "Try '$0 --help'"
    exit 1;
fi

eval set -- "${TEMP}"

# Set a default value for the version tag of the source being
# imported.  By default the version tag will not be set in the git
# repository.

TAG="not-set"

# Set the default number of directory levels to strip.

STRIP=0

# Don't make this a dry run by default.

DRY=""

while true; do
    case "$1" in
	--dry-run) DRY="echo "; shift;;
	-h|--help) usage; shift; exit 0;;
	-t|--tag) TAG=$2; shift 2;;
	-s| --strip-components*) STRIP=$2; shift 2;;
	--) break;;
	*) break;;
    esac
done
shift

# Make sure that this is being run from the top git directory.  Exit if we
# are not.
if [ x.git != x$(git rev-parse --git-dir) ]; then
    usage   
    echo ERROR: Must be run from a top level git directory.
    exit 1; 
fi

if [ ${TAG} != "not-set" ]; then
    echo Importing source with version tag set to: ${TAG}
fi

if [ ${STRIP} != 0 ]; then
    echo Stripping ${STRIP} directory levels from file paths.
fi

# Get the tar arguments and file name.  Save them for later.
TARARGS=$1
TARFILE=$2

if [ ! -f ${TARFILE} ]; then
    echo Input tar file does not exist: ${TARFILE}
    exit 1
fi

# Keep track of the current branch.
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)

if [ ${CURRENT_BRANCH} = HEAD ]; then
   echo Cannot start import from a detached HEAD.
   exit 1;
fi

# Make sure that the upstream branch exists.  If it exists, then this
# doesn't do anything.
${DRY} git branch upstream

# Get the branch for the upstream sources.  This will create the upstream
# branch if it doesn't exist.
${DRY} git checkout upstream

# And make sure that it is empty
${DRY} git rm -r .

# If this is a dry run, the print the contents of the tar file, but don't
extract them.  This is done by changing the "x" command to a "t" command.
if [ "x${DRY}" != "x" ]; then
   TARARGS=`echo ${TARARGS} | sed s/x/t/`
fi

tar ${TARARGS} ${TARFILE} \
    --strip=${STRIP} \
    --exclude='.svn*' \
    --exclude='.cvs*' \
    --exclude='CVS' \
    --show-transformed

# Add all the new files.
${DRY} git add -A

# And commit with a generated message.
MESSAGE="'`basename ${TARFILE}`' imported to 'upstream' branch with tag 'upstream-${TAG}'"
echo "${MESSAGE}"
${DRY} git commit -m "${MESSAGE}"

# Finally set the tag.
${DRY} git tag "upstream-${TAG}"

# Return to the original branch.
git checkout ${CURRENT_BRANCH}

exit 0

#-*-Shell-Script-*-
